import React, { useEffect, useState } from "react";
import ReactMarkdown from 'react-markdown';
import { Link } from "react-router-dom";
import Card from "../placeholders/Card";
import axios from 'axios';
import Pagination from "./Pagination";

export default function Post(props) {
  const options = {
    timeZone: "Asia/Karachi",
    hour12: true,
    weekday: "short",
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric",
  };

  const category = props.category;
  const search = props.search;
  const pageSize = 10;

  const [post, setPost] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageCount, setPageCount] = useState(0);

  async function fetchPost(page) {
    setLoading(true);
    let apiEnd = 'http://localhost:1337/api/newsposts?populate=*';
    if (category) {
      apiEnd = `http://localhost:1337/api/newsposts?populate=*&filters[field][slug][$eq]=${category}`;
    }
    if (search) {
      apiEnd = `http://localhost:1337/api/newsposts?populate=*&filters[newsDescription][$contains]=${search}`;
    }

    try {
      const response = await axios.get(apiEnd, {
        params: {
          'pagination[page]': page,
          'pagination[pageSize]': pageSize
        }
      });
      const { data, meta } = response.data;
      setPost(data);
      setPageCount(meta.pagination.pageCount);
      setLoading(false);
      console.log(data);
    } catch (error) {
      console.error(error);
      setLoading(false);
    }
  }

  useEffect(() => {
    fetchPost(currentPage);
  }, [category, search, currentPage]);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  if (loading) {
    return (
      <>
        <Card></Card>
        <Card></Card>
        <Card></Card>
      </>
    );
  }

  return (
    <div className="col-md-8">
      {post &&
        post.map(postItem => (
          <div key={postItem?.id} className="dot mb-2">
            <Link to={`/post/${postItem?.attributes?.slug}`} className="link link-dark">
              <div className="newspost">
                <div className="newspost-post">
                  <img
                    src={"http://localhost:1337" + postItem?.attributes?.newsImage.data.attributes.url}
                    width="200"
                    height="134"
                    alt="Newspost post"
                  />
                </div>
                <div className="newspost-body">
                  <strong className="d-inline-block text-primary placeholder-glow">
                    {postItem?.attributes?.field.data.attributes?.categoryName}
                  </strong>
                  <h3 className="m-1 placeholder-glow">
                    {postItem?.attributes?.newsTagline.slice(0, 55) + "..."}
                  </h3>
                  <div className="placeholder-glow">
                    <ReactMarkdown children={postItem?.attributes?.newsDescription.slice(0, 100) + " ....."} />
                  </div>
                  <span className="text-muted">
                    {new Date(postItem?.attributes?.createdAt).toLocaleString("en-US", options)}
                  </span>
                </div>
              </div>
            </Link>
          </div>
        ))}
      <Pagination currentPage={currentPage} pageCount={pageCount} onPageChange={handlePageChange} />
    </div>
  );
}






import { useState, useEffect } from "react"
import { Link } from "react-router-dom"
import Pills from "../placeholders/Pills";
export default function Badge() {

    let [categories, setCategories] = useState([])
    let [loading, setLoading] = useState(false);
    async function fetchCategories() {
        setLoading(true)
        let response = await fetch(`http://localhost:1337/api/categories?populate=*`)
        let categoriesResponse = await response.json()
        setCategories(categoriesResponse.data)
        setLoading(false)
    }
    useEffect(() => {
        fetchCategories()
    }, [])

    if (loading)
        return <>
            <div className="d-flex">
                <Pills />
                <Pills />
                <Pills />
            </div>
        </>

    return (

        <div className="pill">
            {
                categories.map(categoryItem =>
                    <div key={categoryItem.id} className="pill">
                        <div className="field position-relative  border-dark text-dark px-3 py-2"><Link className="link text-dark"
                            to={`/category/post/${categoryItem.attributes.slug}`}>
                            <span> {categoryItem.attributes.categoryName}</span></Link>
                        </div>
                    </div>

                )
            }
           

        </div>

    );
}


----------------------------

import React from 'react'
import Badge from '../component/Badge'
import Searchbar from '../component/Searchbar'
export default function Explorepage() {
    return (
        <div>

            <div className=" mt-5 p-4">
                <div className='text-center mt-4 mb-3'>
                    <h1>Explore More Topics
                    </h1>
                </div>
            </div>
            <div className='container col-md-8 mt-3 mb-3'>
                <Searchbar></Searchbar>
            </div>
           
            <div className="container">
                <div className="row mt-4 mb-2">
                    <Badge></Badge>
                </div>
            </div>


        </div>
    )
}


------------------------
import React from "react"
import { useForm } from "react-hook-form"
import { useState } from "react"

export default function Commentbox() {
    const [error,setError] = useState(null)
    const {
        register, handleSubmit, formState: { errors }, reset, } = useForm();

    const onSubmit = async (data) => {
        try {
            const requestOptions = {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ data }),
            };
            const response = await fetch('http://localhost:1337/api/comments', requestOptions);
            const userResponse = await response.json();
            console.log(userResponse);
            if (!response.ok) {
                alert('Here we got some errors');
                setError(response.error);
                throw new Error(response.error);
            }
            alert('Submision successful');
            reset();
        } catch (error) {
            console.log(`error ${error}`);
        }
    };
    return (
        <form action="/" onSubmit={handleSubmit(onSubmit)}>
            <div className="commentbox">
                <div className="box mb-3" >
                    <label htmlFor="exampleFormControlInput1" className="form-label text-light">Username</label>
                    {/* <input type="name" className="form-control" id="exampleFormControlInput1" placeholder="username" /> */}
                    <i className="fas fa-user"></i>
                    <input type="text"
                        {...register("fullName", {
                            required: {
                                value: true,
                                message: "Field required. Please enter your name"
                            },
                            minLength: {
                                value: 3,
                                message: "Name should have atleast 3 characters"
                            },
                        })}
                        className={errors.fullname ? "is-invalid form-control" : " form-control"} placeholder="User Name" required />
                    <span className="text-danger">{errors.fullName && errors.fullName.message}
                    </span>
                </div>
                <div className="box mb-3">
                    <label htmlFor="exampleFormControlInput1" className="form-label text-light">Email address</label>
                    {/* <input type="email" className="form-control" id="exampleFormControlInput1" placeholder="name@example.com" /> */}
                    <i className="fas fa-envelope"></i>
                    <input type="text"
                        className={errors.email ? "is-invalid form-control" : " form-control"}
                        {...register("email", {
                            required: {
                                value: true,
                                message: "Kindly enter a valid email address"
                            },
                            pattern: {
                                value: /^\S+@\S+$/i,
                                message: "invalid format"
                            }
                        })} placeholder="Enter your email" required />
                    <span className="text-danger">  {errors.email && errors.email.message}
                    </span>
                </div>
                <div className="box mb-3">
                    <label htmlFor="exampleFormControlTextarea1" className="form-label text-light">Drop Me a Line.Let Me Know What You Think.</label>
                    <textarea className="form-control"
                        {...register("commentText", {
                            required: true
                        })} id="exampleFormControlTextarea1" rows="3"
                    />
                    {errors.commentText && <span>This field is required</span>}
                </div>
                <div className="col-auto  bttn d-flex">
                    <button type="submit" className="boton ">Submit</button>
                </div>
            </div>
        </form >
    )
}

------------